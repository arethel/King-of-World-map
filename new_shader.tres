[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;

uniform sampler2D textur;
uniform float multiplier=2.0;
uniform float fl;

varying vec3 vert;



void vertex(){
	float arr[3];
	vert=VERTEX*0.5+vec3(0.5);
//	VERTEX.y+=sin(VERTEX.x*10.0*VERTEX.z+TIME*2.0);
	VERTEX.x*=10.0;
	VERTEX.z*=10.0;
	
	
}


void fragment(){
//	vec3 color0 = texture(textur,vert.xz*multiplier+vec2(0.5,0.5)).rgb;
//	float step = 0.0001;
//
//	for(float i = -step;i<=step;i+=step){
//		for(float j = -step;j<=step;j+=step){
//			vec3 color = texture(textur,vert.xz*multiplier+vec2(0.5,0.5)+vec2(i,j)).rgb;
//			if(color!=color0){
//				ALBEDO=vec3(1.0,1.0,1.0);
//			}
//			else{
//				ALBEDO=vec3(1.0,0.0,0.0);
//			}
//		}
//
//	}
	vec3 clr = vec3(floor((vert.xz)*10.0)/10.0,0.0);
	ALBEDO=clr;

		
}



int find_num_of_color(vec3 clr){
	
	return -1;
}

"
